### Instructions:

npm install
bundle exec rails s
bundle exec sidekiq

visit 'localhost:3000' in the browser of your choice

### Comments:

There was no COMMENTS file so I created one.  Since much of this test is things that I only have a passing familarity with
 I thought it might be helpful for y'all if I explain my troubleshooting process so in case I go down a rabbithole you can see why.

 First thing, I believe in TDD but as Websockets is in JS I am unsure how to use Mocha to test JS inside a Rails app so I will skip that for now.

 Currently reading Websocket docs at http://guides.rubyonrails.org/action_cable_overview.html

 Going through the docs and the app code it looks like the connection language is ok, but is missing EfinChannel language (I am assuming based on docs) and the
 subsciber language in app/assets/javascripts/cable/subscriptions

 Set up subscriber.

I am a bit confused by setting up the stream.  There is a efin.js file in app/channels/ and I don't see in the docs that it is suppose to be there.  It's language looks like what
should be in the cable/subscriptions file so it might be in the wrong place or the documentation isn't clear.  I think my best best is to follow the documentation so I will
create a seperate stream first and then play with the efin.js file

I booted up the server and have the following comments:
EfinChannel is transmitting the subscription confirmation
EfinChannel is streaming from
EfinChannel#receive({"household"=>"5", "income"=>"1000"})

So that looks good.  I should have checked that before I did anything to make sure that is all new.
Now I have data being received, I just need to make sure  I can pass it along.  Looking at the efin.js file
the JS language will auto replace the text using jQuery, I just need to get it there $('#efin').text(data.body)
and connect that file somehow (which is maybe already connected, even if it isn't the same layout as the docs)

debugger doesn't work in the JS, attempting to see if the efin.js file is actually capturing the data

I noticed that the server is not puts-ing 'subscribed' or 'connected'.  I feel like that means something
since that is suppose to happen yet the server is still receiving the data inputed by the client

After looking on StackOverflow I realized that the efin_channel.rb file in the Ruby channel section
is suppose to stream_from 'efin', which is where the JS comes from.  That was not in the Ruby docs!

Data still isn't beign recieved in the js file.

Think I figured out the data transfer issue, I needed to broadcast from the Ruby files to the JS files (not in the Docs!).
I think from the Ruby section I need to call the background worker that does the post API request.

Setting up the background worker using Action Job.  Pretty straightforward but won't let me
byebug to make sure the data is correct (luckly I saw it in the server log)(Update, it's because
I didn't start Redis, duh Bret). This means you, my dear user, will have to use Redis to make the app work.
My question now
is if I make the API call then how do I get that data back to the websocket's broadcast to be
shown on the page

Installing Faraday for post request, also testing with Postman
Cant seem to get the format correct, even with using the exact JSON hash used in the example.
Will keep tweaking it.

Still having issues with the format, no idea why it isn't working, single URL or any other way.
I am going to build out the service to take a break from the post attempts.  Hoping for divine inspiration.

Built the Service.  I have two issues that I have an hour to work on, the first is to
figure out the post requets formatting, for the life of me I don't know what the problem is.
Secondly, I need to figure out how to return the Service API call results to the JS websocket code
that posts to the page.  Normally the service returns that info but it is not working for me,
that could very well be because the post request isn't sucessful but I think it is something else.

Since I am nearing the end of my time, if I don't figure these out shortly I will switch to writing tests so
that I am still productive.

Singular OddballService test written.  Had I received correct data I could have written more Service tests.

















